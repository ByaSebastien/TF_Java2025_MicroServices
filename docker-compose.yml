services:
  rabbitmq:
    image: "rabbitmq:management"
    ports:
      - "5672:5672"
      - "15672:15672"
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres:
    image: "postgres:latest"
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
      POSTGRES_DB: ecommerce_db
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U user -d ecommerce_db" ]
      interval: 10s
      timeout: 5s
      retries: 5

  eureka-service:
    build: ./eureka-service
    ports:
      - "8761:8761"
    environment:
      - PORT=8761
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8761/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5

  api-gateway:
    build: ./api-gateway
    ports:
      - "8080:8080"
    depends_on:
      eureka-service:
        condition: service_healthy
    environment:
      - PORT=8080
    restart: unless-stopped

  auth-service:
    build:
      context: ./
      dockerfile: auth-service/Dockerfile
    environment:
      - PORT=8081
      - SERVICE_NAME=auth-service
    ports:
      - "8081:8081"
    depends_on:
      eureka-service:
        condition: service_healthy
      api-gateway:
        condition: service_started
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: unless-stopped

  order-service:
    build:
      context: ./
      dockerfile: order-service/Dockerfile
    environment:
      - PORT=8082
      - SERVICE_NAME=order-service
    ports:
      - "8082:8082"
    depends_on:
      eureka-service:
        condition: service_healthy
      api-gateway:
        condition: service_started
      auth-service:
        condition: service_started
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: unless-stopped

  inventory-service:
    build:
      context: ./
      dockerfile: inventory-service/Dockerfile
    environment:
      - PORT=8083
      - SERVICE_NAME=inventory-service
    ports:
      - "8083:8083"
    depends_on:
      eureka-service:
        condition: service_healthy
      api-gateway:
        condition: service_started
      order-service:
        condition: service_started
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: unless-stopped

  payment-service:
    build:
      context: ./
      dockerfile: payment-service/Dockerfile
    environment:
      - PORT=8084
      - SERVICE_NAME=payment-service
    ports:
      - "8084:8084"
    depends_on:
      eureka-service:
        condition: service_healthy
      api-gateway:
        condition: service_started
      order-service:
        condition: service_started
      rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: unless-stopped
